{"version":3,"sources":["hooks/useWindowDimensions.js","components/about/About.js","components/portfolio/Portfolio.js","components/contact/Contact.js","components/navigator/Navigator.js","App.js","serviceWorker.js","index.js"],"names":["getWindowsDimensions","window","width","innerWidth","height","innerHeight","useWindowDimensions","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","About","forwardRef","props","ref","windowSize","className","style","Portfolio","Contact","Navigator","scrollTo","handleOnClick","e","preventDefault","target","name","onClick","App","aboutRef","useRef","portfolioRef","contactRef","Fragment","section","current","scrollIntoView","behavior","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kVAEMA,EAAuB,WAAO,IAAD,EACoBC,OACnD,MAAO,CAAEC,MAFsB,EACvBC,WACQC,OAFe,EACJC,cAsBhBC,EAlBa,WAAO,IAAD,EACkBC,mBAASP,KAD3B,mBACvBQ,EADuB,KACLC,EADK,KAe9B,OAZAC,qBAAU,WACN,IAAMC,EAAe,WACjBF,EAAoBT,MAKxB,OAFAC,OAAOW,iBAAiB,SAAUD,GAE3B,WACHV,OAAOY,oBAAoB,SAAUF,MAE1C,IAEIH,GCJIM,EAZDC,sBAAW,SAACC,EAAOC,GAC7B,IAAMC,EAAaZ,IAEnB,OACI,yBAAKa,UAAU,oBAAoBC,MAAO,CAAEhB,OAAQc,EAAWd,QAAUa,IAAKA,GAC1E,0BAAME,UAAU,MAAhB,YACA,uBAAGA,UAAU,MAAb,iGACA,uBAAGA,UAAU,SAAb,0DCIGE,G,MAVGN,sBAAW,SAACC,EAAOC,GACjC,IAAMC,EAAaZ,IAEnB,OACI,yBAAKa,UAAU,wBAAwBC,MAAO,CAAEhB,OAAQc,EAAWd,QAAUa,IAAKA,GAC9E,0BAAME,UAAU,MAAhB,kBCKGG,G,MAVCP,sBAAW,SAACC,EAAOC,GAC/B,IAAMC,EAAaZ,IAEnB,OACI,yBAAKa,UAAU,sBAAsBC,MAAO,CAAEhB,OAAQc,EAAWd,QAAUa,IAAKA,GAC5E,0BAAME,UAAU,MAAhB,gBCYGI,G,MAnBG,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEXC,EAAgB,SAACC,GACnBA,EAAEC,iBACFH,EAASE,EAAEE,OAAOC,OAGtB,OACI,yBAAKV,UAAU,iBACX,yBAAKA,UAAU,OACX,4BAAQA,UAAU,oBAAoBU,KAAK,UAAUC,QAASL,GAA9D,YACA,4BAAQN,UAAU,oBAAoBU,KAAK,YAAYC,QAASL,GAAhE,aACA,4BAAQN,UAAU,oBAAoBU,KAAK,UAAUC,QAASL,GAA9D,eCiCDM,EA7CH,WACV,IAAMC,EAAWC,iBAAO,MAClBC,EAAeD,iBAAO,MACtBE,EAAaF,iBAAO,MAgC1B,OACE,kBAAC,IAAMG,SAAP,KACE,kBAAC,EAAD,CAAWZ,SAhCE,SAACa,GAChB,OAAQA,GACN,IAAK,UACCL,EAASM,SACXN,EAASM,QAAQC,eAAe,CAC9BC,SAAU,WAGd,MAEF,IAAK,YACCN,EAAaI,SACfJ,EAAaI,QAAQC,eAAe,CAClCC,SAAU,WAGd,MAEF,IAAK,UACCL,EAAWG,SACbH,EAAWG,QAAQC,eAAe,CAChCC,SAAU,eAYhB,kBAAC,EAAD,CAAOvB,IAAKe,IACZ,kBAAC,EAAD,CAAWf,IAAKiB,IAChB,kBAAC,EAAD,CAASjB,IAAKkB,MCjCAM,QACW,cAA7BxC,OAAOyC,SAASC,UAEe,UAA7B1C,OAAOyC,SAASC,UAEhB1C,OAAOyC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d1020a79.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\r\n\r\nconst getWindowsDimensions = () => {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return { width, height };\r\n}\r\n\r\nconst useWindowDimensions = () => {\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowsDimensions());\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setWindowDimensions(getWindowsDimensions());\r\n        }\r\n\r\n        window.addEventListener(\"resize\", handleResize);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"resize\", handleResize);\r\n        }\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n}\r\n\r\nexport default useWindowDimensions;","import React, { forwardRef } from \"react\";\r\nimport \"../../App.css\";\r\nimport \"./About.css\";\r\n\r\nimport { useWindowDimensions } from \"../../hooks\";\r\n\r\nconst About = forwardRef((props, ref) => {\r\n    const windowSize = useWindowDimensions();\r\n\r\n    return (\r\n        <div className=\"section about-bkg\" style={{ height: windowSize.height }} ref={ref}>\r\n            <span className=\"h1\">About Me</span>\r\n            <p className=\"h6\">Hello. My name is Dale. I am an aspiring front-end developer currently based in the Bay Area.</p>\r\n            <p className=\"body1\">I am still in the middle of building this porfolio</p>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default About;","import React, { forwardRef } from \"react\";\r\n\r\nimport \"../../App.css\";\r\nimport \"./Portfolio.css\";\r\n\r\nimport { useWindowDimensions } from \"../../hooks\";\r\n\r\nconst Portfolio = forwardRef((props, ref) => {\r\n    const windowSize = useWindowDimensions();\r\n\r\n    return (\r\n        <div className=\"section portfolio-bkg\" style={{ height: windowSize.height }} ref={ref}>\r\n            <span className=\"h1\">Portfolio</span>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Portfolio;","import React, { forwardRef } from \"react\";\r\n\r\nimport \"../../App.css\";\r\nimport \"./Contact.css\";\r\n\r\nimport { useWindowDimensions } from \"../../hooks\";\r\n\r\nconst Contact = forwardRef((props, ref) => {\r\n    const windowSize = useWindowDimensions();\r\n\r\n    return (\r\n        <div className=\"section contact-bkg\" style={{ height: windowSize.height }} ref={ref}>\r\n            <span className=\"h1\">Contact</span>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Contact;","import React from \"react\";\r\n\r\nimport \"../../App.css\";\r\nimport \"./Navigator.css\";\r\n\r\nconst Navigator = ({ scrollTo }) => {\r\n\r\n    const handleOnClick = (e) => {\r\n        e.preventDefault();\r\n        scrollTo(e.target.name);\r\n    }\r\n\r\n    return (\r\n        <div className=\"nav-container\">\r\n            <div className=\"nav\">\r\n                <button className=\"nav-btn subtitle1\" name=\"aboutme\" onClick={handleOnClick}>About Me</button>\r\n                <button className=\"nav-btn subtitle1\" name=\"portfolio\" onClick={handleOnClick}>Portfolio</button>\r\n                <button className=\"nav-btn subtitle1\" name=\"contact\" onClick={handleOnClick}>Contact</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Navigator;","import React, { useRef } from 'react';\r\nimport './App.css';\r\n\r\nimport { About, Portfolio, Contact, Navigator } from \"./components\";\r\n\r\nconst App = () => {\r\n  const aboutRef = useRef(null);\r\n  const portfolioRef = useRef(null);\r\n  const contactRef = useRef(null);\r\n\r\n  const scrollTo = (section) => {\r\n    switch (section) {\r\n      case \"aboutme\": {\r\n        if (aboutRef.current) {\r\n          aboutRef.current.scrollIntoView({\r\n            behavior: \"smooth\"\r\n          })\r\n        }\r\n        break;\r\n      }\r\n      case \"portfolio\": {\r\n        if (portfolioRef.current) {\r\n          portfolioRef.current.scrollIntoView({\r\n            behavior: \"smooth\"\r\n          })\r\n        }\r\n        break;\r\n      }\r\n      case \"contact\": {\r\n        if (contactRef.current) {\r\n          contactRef.current.scrollIntoView({\r\n            behavior: \"smooth\"\r\n          })\r\n        }\r\n        break;\r\n      }\r\n      default: { }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Navigator scrollTo={scrollTo} />\r\n      <About ref={aboutRef} />\r\n      <Portfolio ref={portfolioRef} />\r\n      <Contact ref={contactRef} />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}