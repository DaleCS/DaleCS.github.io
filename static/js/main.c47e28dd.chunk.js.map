{"version":3,"sources":["hooks/useWindowDimensions.js","hooks/useScrollTrigger.js","components/about/About.js","components/portfolio/project/ProjectCard.js","components/portfolio/Portfolio.js","components/contact/Contact.js","App.js","serviceWorker.js","index.js"],"names":["getWindowsDimensions","window","width","innerWidth","height","innerHeight","useWindowDimensions","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useScrollTrigger","sectionsRef","visibilityObj","setVisibilityObj","visibilityObjRef","useRef","dummyVisibilityObj","Object","keys","forEach","key","current","handleScroll","getBoundingClientRect","top","bottom","forwardRef","props","ref","windowSize","className","style","ProjectCard","isVisible","projectsMarkup","timeInc","projects","map","proj","project","display","animsTimer","renderProjects","animationDelay","title","PlaceHolder","App","aboutRef","portfolioRef","contactRef","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c47e28dd.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\r\n\r\nconst getWindowsDimensions = () => {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return { width, height };\r\n}\r\n\r\nconst useWindowDimensions = () => {\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowsDimensions());\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setWindowDimensions(getWindowsDimensions());\r\n        }\r\n\r\n        window.addEventListener(\"resize\", handleResize);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"resize\", handleResize);\r\n        }\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n}\r\n\r\nexport default useWindowDimensions;","import { useRef, useState, useEffect } from \"react\";\r\n\r\nconst useScrollTrigger = (sectionsRef) => {\r\n    const [visibilityObj, setVisibilityObj] = useState({});\r\n    const visibilityObjRef = useRef(visibilityObj);\r\n\r\n    useEffect(() => {\r\n        let dummyVisibilityObj = {};\r\n        Object.keys(sectionsRef).forEach(key => {\r\n            dummyVisibilityObj[key] = false;\r\n        })\r\n\r\n        visibilityObjRef.current = { ...dummyVisibilityObj };\r\n        setVisibilityObj({ ...dummyVisibilityObj });\r\n\r\n        const handleScroll = () => {\r\n            Object.keys(sectionsRef).forEach(key => {\r\n                const { height, top, bottom } = sectionsRef[key].current.getBoundingClientRect();\r\n                if (top <= height - (window.innerHeight / 8) && bottom >= window.innerHeight / 8) {\r\n                    if (!visibilityObjRef.current[key]) {\r\n                        visibilityObjRef.current[key] = true;\r\n                        setVisibilityObj({\r\n                            ...visibilityObjRef.current,\r\n                            [key]: true\r\n                        })\r\n                    }\r\n                } else if (visibilityObjRef.current[key]) {\r\n                    visibilityObjRef.current[key] = false;\r\n                    setVisibilityObj({\r\n                        ...visibilityObjRef.current,\r\n                        [key]: false\r\n                    })\r\n                }\r\n            });\r\n        }\r\n\r\n        window.addEventListener(\"scroll\", handleScroll);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", handleScroll);\r\n        }\r\n    }, [sectionsRef]);\r\n\r\n    return visibilityObj;\r\n}\r\n\r\nexport default useScrollTrigger;","import React, { forwardRef } from \"react\";\r\nimport \"../../App.css\";\r\nimport \"./About.css\";\r\n\r\nimport { useWindowDimensions } from \"../../hooks\";\r\n\r\nconst About = forwardRef((props, ref) => {\r\n    const windowSize = useWindowDimensions();\r\n\r\n    return (\r\n        <div className=\"section about-bkg\" style={{ height: windowSize.height }} ref={ref}>\r\n            <div className=\"text\">\r\n                <span className=\"h3 mb-8\">Hello. My name is Dale.</span>\r\n                <span className=\"h5 mb-8\">I am an aspiring front-end developer currently based in the Bay Area.</span>\r\n                <span className=\"body1\">\r\n                    I have experience building intuitive and responsive UI for a variety of web pages ranging from regular static pages to\r\n                    interactive search w/ filter pages using modern frameworks such as React and Angular. I also have experience building RESTful APIs that power\r\n                    their corresponding front-end.\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default About;","import React from \"react\";\r\n\r\nimport \"../../../App.css\";\r\nimport \"./Project.css\";\r\n\r\nconst ProjectCard = ({ project, display, animsTimer }) => {\r\n    return <div className={display ? \"project-card fade-in\" : \"project-card\"} style={{ animationDelay: `${animsTimer}ms` }}>\r\n        <span className=\"h5\">{project.title}</span>\r\n    </div>\r\n}\r\n\r\nexport default ProjectCard;","import React, { forwardRef } from \"react\";\r\n\r\nimport \"../../App.css\";\r\nimport \"./Portfolio.css\";\r\n\r\nimport { ProjectCard } from \"../\";\r\nimport { useWindowDimensions } from \"../../hooks\";\r\n\r\nimport { projects } from \"../../store\";\r\n\r\nconst Portfolio = forwardRef(({ isVisible }, ref) => {\r\n    const windowSize = useWindowDimensions();\r\n\r\n    const renderProjects = () => {\r\n        if (isVisible) {\r\n            let timeInc = 100;\r\n            return projects.map(proj => {\r\n                timeInc += 125;\r\n                return <ProjectCard project={proj} display={isVisible} animsTimer={timeInc} key={proj.key} />\r\n            });\r\n        } else {\r\n            return projects.map(proj => {\r\n                return <ProjectCard project={proj} display={isVisible} animsTimer={0} key={proj.key} />\r\n            })\r\n        }\r\n    }\r\n\r\n    let projectsMarkup = renderProjects();\r\n\r\n    return (\r\n        <div className=\"section portfolio-bkg\" style={{ height: windowSize.height }} ref={ref}>\r\n            <span className=\"h1\">Portfolio</span>\r\n            <div className=\"projects-container border1\">\r\n                {projectsMarkup}\r\n            </div>\r\n        </div >\r\n    );\r\n})\r\n\r\nexport default Portfolio;","import React, { forwardRef } from \"react\";\r\n\r\nimport \"../../App.css\";\r\nimport \"./Contact.css\";\r\n\r\nimport { useWindowDimensions } from \"../../hooks\";\r\n\r\nconst Contact = forwardRef((props, ref) => {\r\n    const windowSize = useWindowDimensions();\r\n\r\n    return (\r\n        <div className=\"section contact-bkg\" style={{ height: windowSize.height }} ref={ref}>\r\n            <span className=\"h1\">Contact</span>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Contact;","import React, { useRef, Fragment } from 'react';\r\nimport './App.css';\r\n\r\nimport { About, Portfolio, Contact, Navigator } from \"./components\";\r\nimport { useScrollTrigger, useWindowDimensions } from './hooks';\r\n\r\nconst PlaceHolder = () => {\r\n  const windowSize = useWindowDimensions();\r\n\r\n  return <div className=\"section placeholder-blue\" style={{ height: windowSize.height }}>\r\n    <div className=\"placeholder-text\">\r\n      <span className=\"h3 placeholder-anims\" style={{ animationDelay: \"1500ms\" }}>Ah. You've found my web portfolio...</span>\r\n      <span className=\"h5 placeholder-anims\" style={{ animationDelay: \"4000ms\" }}>It's still under construction... Please come back later! - DaleCS</span>\r\n    </div>\r\n  </div>\r\n}\r\n\r\nconst App = () => {\r\n  const aboutRef = useRef(null); // Holds the div element in the About component\r\n  const portfolioRef = useRef(null); // Holds the div element in the Portfolio component\r\n  const contactRef = useRef(null); // Holds the div element in the Contact component\r\n\r\n  const sectionsRef = useRef({ \"aboutme\": aboutRef, \"portfolio\": portfolioRef, \"contact\": contactRef });\r\n  const visibilityObj = useScrollTrigger(sectionsRef.current);\r\n\r\n  const scrollTo = (section) => {\r\n    switch (section) {\r\n      case \"aboutme\": {\r\n        if (aboutRef.current) {\r\n          aboutRef.current.scrollIntoView({\r\n            behavior: \"smooth\"\r\n          })\r\n        }\r\n        break;\r\n      }\r\n      case \"portfolio\": {\r\n        if (portfolioRef.current) {\r\n          portfolioRef.current.scrollIntoView({\r\n            behavior: \"smooth\"\r\n          })\r\n        }\r\n        break;\r\n      }\r\n      case \"contact\": {\r\n        if (contactRef.current) {\r\n          contactRef.current.scrollIntoView({\r\n            behavior: \"smooth\"\r\n          })\r\n        }\r\n        break;\r\n      }\r\n      default: { }\r\n    }\r\n  }\r\n\r\n  // return (\r\n  //   <Fragment>\r\n  //     <Navigator scrollTo={scrollTo} />\r\n  //     <About ref={aboutRef} isVisible={visibilityObj[\"aboutme\"]} />\r\n  //     <Portfolio ref={portfolioRef} isVisible={visibilityObj[\"portfolio\"]} />\r\n  //     <Contact ref={contactRef} isVisible={visibilityObj[\"contact\"]} />\r\n  //   </Fragment>\r\n  // );\r\n\r\n  return (<PlaceHolder />)\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}